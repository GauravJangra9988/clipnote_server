name: Deploy Clipnote server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: clipnote
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.0"

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests (with Postgres)
        env:
          DB_HOST: localhost
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: clipnote
          DB_PORT: 5432
          DB_SSLMODE: disable
          PORT: 8080
        run: go test ./...

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t gauravjangra9988/clipnote_server:latest .

      - name: Push Docker image
        run: docker push gauravjangra9988/clipnote_server:latest

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Docker Compose v2 (if missing)
        run: |
          if ! docker compose version >/dev/null 2>&1; then
            echo "Installing docker compose plugin..."
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
          else
            echo "Docker Compose already installed"
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull latest app image
        run: docker pull gauravjangra9988/clipnote_server:latest

      - name: Create .env file from GitHub Secrets
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_SSLMODE=${{ secrets.DB_SSLMODE }}" >> .env
          echo "DB_MAX_CONNS=${{ secrets.DB_MAX_CONNS }}" >> .env
          echo "DB_MIN_CONNS=${{ secrets.DB_MIN_CONNS }}" >> .env
          echo "DB_MAX_CONN_LIFETIME=${{ secrets.DB_MAX_CONN_LIFETIME }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "SECRETKEY=${{ secrets.SECRETKEY }}" >> .env

      - name: Deploy with docker compose
        run: |
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml up -d
